<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="PEAR - WhiteSpace"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
  <description>
Sniffs related to white space and indention in PEAR.
  </description>
  <rule name="ObjectOperatorIndent" class="PEAR_Sniffs_WhiteSpace_ObjectOperatorIndentSniff">
    <description>
Object operators must be indented 4 spaces if they are the first thing on a line.
    </description>
    <properties>
      <property name="indent" description="The number of spaces code should be indented." value="4" />
    </properties>
    <example>
      <![CDATA[
$object
    ->setBar($foo)
    ->setFoo($bar);
      ]]>
    </example>
  </rule>
  <rule name="ScopeClosingBrace" class="PEAR_Sniffs_WhiteSpace_ScopeClosingBraceSniff">
    <description>
Closing braces of scopes must be aligned correctly. See the example.
    </description>
    <properties>
      <property name="indent" description="The number of spaces code should be indented." value="4" />
    </properties>
    <example>
      <![CDATA[
class Test
{
    public function __construct()
    {
    }

    public function test1()
    {
    }

    public function test2()
    {
    }

    private function test3()
    {
    }

}
      ]]>
    </example>
  </rule>
  <rule name="ScopeIndent" class="PEAR_Sniffs_WhiteSpace_ScopeIndentSniff">
    <description>
Checks that control structures are structured correctly, and their content is indented correctly.

See the example for details.
    </description>
    <example>
      <![CDATA[
//Valid indentions

/**
 * This is a comment 1.
 * This is a comment 2.
 * This is a comment 3.
 * This is a comment 4.
 */
public function close()
{
    // All ok.
    if (TRUE) {
        if (TRUE) {
        } else if (FALSE) {
            foreach ($tokens as $token) {
                switch ($token) {
                case '1':
                case '2':
                    if (true) {
                        if (false) {
                            if (false) {
                                if (false) {
                                    echo 'hello';
                                }
                            }
                        }
                    }
                break;
                case '5':
                    break;
                }
                do {
                    while (true) {
                        foreach ($tokens as $token) {
                            for ($i = 0; $i < $token; $i++) {
                                echo 'hello';
                            }
                        }
                    }
                } while (true);
            }
        }
    }
}
      ]]>
    </example>
  </rule>
</ruleset>
