<?xml version="1.0" encoding="UTF-8" ?>
<ruleset name="Generic - Code Analysis"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
  <description>
Sniff for detecting superfluously complex expressions and trivial but harder to spot mistakes
  </description>
 
  <rule name="EmptyStatement" class="Generic_Sniffs_CodeAnalysis_EmptyStatementSniff">
    <description>
Statements may not have an empty body.
    </description>
    <example>
      <![CDATA[
if($x == 5) {
  // nothing in the statements body
}
      ]]>
    </example>
  </rule>

  <rule name="ForLoopShouldBeWhileLoop" class="Generic_Sniffs_CodeAnalysis_ForLoopShouldBeWhileLoopSniff">
    <description>
All 'for' loops that could be simplified to a 'while' loop must be simplified.
    </description>
    <example>
      <![CDATA[
class Foo {
  public function bar($x) {
    for (;$x > 5;) { /* ... */ } // No Init or Update part, may as well be: while ($x > 5)
  }
}      
      ]]>
    </example>
  </rule>

  <rule name="ForLoopWithTestFunctionCall" class="Generic_Sniffs_CodeAnalysis_ForLoopWithTestFunctionCallSniff">
    <description>
For loops test expressions may not have function calls in them.
    </description>
    <example>
      <![CDATA[
 class Foo {
   public function bar($x) {
     $a = array(1, 2, 3, 4);
     for ($i = 0; $i < count($a); $i++) {
       $a[$i] *= $i;
     }
   }
 }
      ]]>
    </example>
  </rule>

  <rule name="JumbledIncrementer" class="Generic_Sniffs_CodeAnalysis_JumbledIncrementerSniff">
    <description>
Reports cases where incrementer jumbling might happen in 'for' loops.
    </description>
    <example>
      <![CDATA[
 function bar($x) {
   for ($i = 0; $i < 10; $i++) {
     for ($k = 0; $k < 20; $i++) {
       echo 'Hello';
     }
   }
 }
      ]]>
    </example>
  </rule>

  <rule name="UnconditionalIfStatement" class="Generic_Sniffs_CodeAnalysis_UnconditionalIfStatementSniff">
    <description>
If- and elseif-statements may not be unconditional.
    </description>
    <example>
      <![CDATA[
if(true) {
}
      ]]>
    </example>
  </rule>

  <rule name="UnnecessaryFinalModifier" class="Generic_Sniffs_CodeAnalysis_UnnecessaryFinalModifierSniff">
    <description>
No unnecessary final modifiers inside of final classes.
    </description>
    <example>
      <![CDATA[
final class Bar {
  final public function() {
  }
}
      ]]>
    </example>
  </rule>

  <rule name="UnusedFunctionParameter" class="Generic_Sniffs_CodeAnalysis_UnusedFunctionParameterSniff">
    <description>
No unused function parameters are allowed.
    </description>
    <example>
      <![CDATA[
function bar($x, $y) {
  echo $y; // No $x usage
}
      ]]>
    </example>
  </rule>

  <rule name="UselessOverridingMethod" class="Generic_Sniffs_CodeAnalysis_UselessOverridingMethodSniff">
    <description>
No unnecessary overridden methods, that simply call their parent, are allowed.
    </description>
    <example>
      <![CDATA[
class Foo {
  public function __construct($foo, $bar) {
    parent::__construct($foo, $bar);
  }
}
      ]]>
    </example>
  </rule>

</ruleset>
